plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.12'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.diffplug.spotless' version '6.19.0'
	id 'org.ysb33r.doxygen' version '0.7.0'
	// id "org.sonarqube" version "3.4.0.2513"
	// id "org.sonarqube" version "4.2.0.3129"
	id 'jacoco'
	id 'project-report'
 	id 'build-dashboard'
}

group = 'net.ljcomputing'
version = '0.0.1-SNAPSHOT'

ext {
    flinkVersion = '1.17.1'
    scalaVersion = '_2.12'
}

java {
	sourceCompatibility = '11'
    withJavadocJar()
    withSourcesJar()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
    mavenLocal()
    
    maven {
        url = uri('http://localhost:8081/repository/maven-central/')
        allowInsecureProtocol = true
    }

    // mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
    implementation "org.apache.flink:flink-java:${flinkVersion}"
    implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-files:${flinkVersion}"
    implementation "org.apache.flink:flink-table-common:${flinkVersion}"
    implementation "org.apache.flink:flink-table-api-java:${flinkVersion}"
    implementation "org.apache.flink:flink-table-api-java-bridge:${flinkVersion}"
    implementation "org.apache.flink:flink-table-planner-loader:${flinkVersion}"
    implementation "org.apache.flink:flink-table-runtime:${flinkVersion}"
    implementation "org.apache.flink:flink-sql-parser:${flinkVersion}"
    implementation "org.apache.flink:flink-csv:${flinkVersion}"
    implementation "org.apache.flink:flink-json:${flinkVersion}"
    implementation "org.apache.flink:flink-connector-jdbc:3.1.1-1.17"

	compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
 
tasks.withType(JavaCompile) {
  dependsOn spotlessApply
  options.encoding = 'UTF-8'
}

bootRun {
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes (
          'Main-Class': 'net.ljcomputing.flinkplumber.FlinkPlumberApplication',
          'Implementation-Title': 'Flink Plumber ETL',
          'Implementation-Version': version
        )
    }
}

spotless {
  java {
    targetExclude("build/**")
    licenseHeaderFile("$rootProject.projectDir/configuration/spotless/license-header.java").updateYearWithLatest(true)
    toggleOffOn()
    trimTrailingWhitespace()
    endWithNewline()
    removeUnusedImports()
    importOrder('java', 'javax', '', '\\#')
    googleJavaFormat('1.15.0').aosp().reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
  }
}

javadoc {
  exclude("build/generated/sources/**/*.java")
	options.memberLevel = JavadocMemberLevel.PRIVATE
  failOnError(false)
}

doxygen {
  source new File(projectDir, 'src/main/java')
   project_name 'Flink Plumber ETL'
   optimize_output_java true
   javadoc_autobrief true
   extract_private true
   extract_static true
   generate_rtf true
   generate_latex true
   generate_html true
   generate_treeview true
   treeview_width 100
}

test {
  testLogging.showStandardStreams = true
  finalizedBy jacocoTestReport
  useJUnitPlatform()

  jacoco {
    excludes = ['**$Handler']
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 1.0
      }
    }
  }
}

// sonarqube {
//     properties {
// 	property "sonar.projectKey", "net.ljcomputing.conduit"
// 	property "sonar.host.url", "http://localhost:9005"
// 	property "sonar.login", "sqp_0ae93b405c1168104bfff825883bb7e251d5cdeb"
// 	property 'sonar.verbose', 'true'
// 	property 'sonar.sourceEncoding', 'UTF-8'
//         property 'sonar.exclusions', 'build/generated-src/**'
//   }
// }

// sonarqube {
//   properties {
//     property "sonar.projectKey", "willmorejg_conduit"
//     property "sonar.organization", "willmorejg"
//     property "sonar.host.url", "https://sonarcloud.io"
//     property 'sonar.verbose', 'true'
//     property 'sonar.sourceEncoding', 'UTF-8'
//   }
// }
